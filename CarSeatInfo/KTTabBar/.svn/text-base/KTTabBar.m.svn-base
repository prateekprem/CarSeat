//
//  KTTabBar.m
//  KTTabBar
//
//  Created by RAVI DAS on 29/03/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#import "KTTabBar.h"
#import "AppDelegate.h"
#import "LoginViewController.h"
#import "AnimateViews.h"
#import "DBManager.h"
#import "SyncDataController.h"
#import "LoadingView.h"
#import "ServerDataHandler.h"
#import "FileFetcherController.h"

#define TAB_TOP_MARGINE 20
#define TAB_BAR_WIDTH   115 
#define TAB_DETAIL_BTN_HEIGHT 0
#define TAB_BAR_MERGINE 5

#define SECTION_MARGINE 10

@interface KTTabBar (Private)

-(void)reloadItems;
-(void)tapped:(int)itemTapped;
-(void)showTabBar;
-(void)hideTabBar;
-(void)setItemDefaultSize;
-(void)addView:(UIView*)view;
-(void)reloadTabBar;

@end



@implementation KTTabBar



//@synthesize viewCntrollers = _viewCntrollers ;
@synthesize items = _items;
@synthesize selectedItem;
@synthesize rootViewController;
@synthesize delegate;
@synthesize rootView;
@synthesize selectEnable;
@synthesize logoutBtn=logoutBtn;
//@synthesize backViewForPopover=backViewForPopover_;
UIView *preView;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        
        //tabBar = [[UIScrollView alloc] initWithFrame:CGRectMake(0,10,88,20)];
        
        //self.viewCntrollers = [[NSMutableArray alloc]init];
        self.items  = [[NSMutableArray alloc]init];
        showTabBar = TRUE;
//        backViewForPopover_=[[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];
//        [backViewForPopover_ setBackgroundColor:[UIColor blackColor]];
//        backViewForPopover_.alpha=0.5;
        
    }
    return self;
}




- (IBAction)detailButtonClicked:(id)sender 
{
    showTabBar = !showTabBar;
    
    if(showTabBar)
        [self showTabBar];
    else
        [self hideTabBar];
    
}


-(IBAction)logoutButtonClicked:(id)sender
{
    if([[FileFetcherController sharedController] checkNetworkStatus]==NO)
    {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"" message:@"Logout in offline mode may cause of data lose. Do you still want to logout?" delegate:self cancelButtonTitle:@"NO" otherButtonTitles:@"YES",nil];
        alert.tag=11;
        [alert show];
        
        return;
    }
    
    appDelegate.window.userInteractionEnabled=NO;
    _syncDataController = [[SyncDataController alloc] init];
    _syncDataController.delegate = self;
    [_syncDataController checkForSyncContentAvailability];
       
    //[self reloadTabBar];
}


- (void)logout {
  
    
    WebServiceController *serverData = [WebServiceController sharedController];
    [serverData callLogoutWebService:appDelegate.userId_global];
    
    if (serverData.responseDictonary) {
        if ([serverData.responseDictonary objectForKey:@"code"]) {
            if ([[serverData.responseDictonary objectForKey:@"code"]intValue] == 1) {
                [appDelegate addLoginViewController];
                appDelegate.userId_global = nil;
                
                appDelegate.window.userInteractionEnabled=YES;
                [self removeTabBar];
            
            }
            else
            {
                appDelegate.window.userInteractionEnabled=YES;
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Network Error!" message:@"Logout Failed. Please try again..." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            
            }
        }
        
        
    } 
    
    
   
    
}


- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    if(alertView.tag==11)
    {
        [appDelegate.window setUserInteractionEnabled:YES];
      if(buttonIndex!=alertView.cancelButtonIndex)
      {
          [appDelegate addLoginViewController];
          appDelegate.userId_global = nil;
          [self removeTabBar];
      }
    }
}

-(void)showTabBar
{
    [UIView beginAnimations:@"Show" context:nil];
    [UIView setAnimationDuration:1.0 ];
    
    //tabBar.frame = CGRectMake(0, self.view.frame.size.width - tabBar.frame.size.width,tabBar.frame.size.height, tabBar.frame.size.width);
    
    [UIView commitAnimations];
    
    
}

-(void)hideTabBar
{
    
    [UIView beginAnimations:@"Hide" context:nil];
    [UIView setAnimationDuration:1.0 ];
    
    //tabBar.frame = CGRectMake(0, self.view.frame.size.width-TAB_DETAIL_BTN_HEIGHT ,tabBar.frame.size.height, tabBar.frame.size.width);
    
    [UIView commitAnimations];
}


-(void)addItem:(KTTabBarItem*)tabBarItem
{
       
    NSLog(@"%@",self.items);
    tabBarItem.delegate = self;
        
    [self.items addObject:tabBarItem];
    
}

-(KTTabBarItem*)itemAtIndex:(int)index
{
    return [self.items objectAtIndex:index];
}

-(void)setItemDefaultSize
{
//    for(KTTabBarItem * item in self.items)
//        item.frame = CGRectMake(0,0,tabBar.frame.size.width-7,tabBar.frame.size.width-9);
}



-(void)reloadItems
{
    [tabBar setBackgroundColor:[UIColor clearColor]];
   // [self setItemDefaultSize];
    
//    tabBar.contentSize = CGSizeMake(tabBar.frame.size.height,TAB_DETAIL_BTN_HEIGHT);
    //float yOffset=15.0;
    for (int index=0; index<[self.items count]; index++) {
        KTTabBarItem *barItem=[self.items objectAtIndex:index];
        
     
        if (index < 3) {
               barItem.frame=CGRectMake((tabBar.frame.size.width-barItem.frame.size.width)/2+1, barItem.frame.origin.y-7, barItem.frame.size.width, barItem.frame.size.height);
        }
        else if (index == 8) 
        {
           barItem.frame=CGRectMake((tabBar.frame.size.width-barItem.frame.size.width)/2+1, barItem.frame.origin.y+1, barItem.frame.size.width, barItem.frame.size.height);  
            
        }
        else
        barItem.frame=CGRectMake((tabBar.frame.size.width-barItem.frame.size.width)/2+1, barItem.frame.origin.y, barItem.frame.size.width, barItem.frame.size.height);
        
        
         
        [tabBar addSubview:barItem];
      //  yOffset+=barItem.frame.size.height+15.0;
    }
    tabBarBackgroundImage.frame = tabBar.bounds;
    
    
    //CGPoint center = CGPointMake([[self.items objectAtIndex:0] frame].size.width/2, [[self.items objectAtIndex:0] frame].size.height/2);
//    CGPoint center = [[self.items objectAtIndex:0]center];
//    center.x = ([tabBar frame].size.width-[[self.items objectAtIndex:0]itemImageView].frame.size.width)/2;
//    center.y = center.y;
//    
//    int count = 0;
//    for(KTTabBarItem *item in self.items)
//    {
//        
//        item.backgroundColor = [UIColor clearColor];
//        [tabBar addSubview:item];
//        item.center = center;
//        int margine = 0; 
//        
//        if(  count == 3 ||count ==0)
//        {
//            item.center = CGPointMake(center.x, center.y+15);
//            margine = TAB_BAR_MERGINE;
//            
//        }
//         
//            
//            
//        
//        
//        
//       // itemButton.frame = CGRectMake(0,center.y,self.frame.size.width, self.frame.size.height);
//        if((center.y + item.frame.size.width/2-TAB_BAR_MERGINE*2)< self.view.frame.size.height-TAB_TOP_MARGINE)        
//            tabBar.frame = CGRectMake(0, tabBar.frame.origin.y - item.frame.size.height,tabBar.frame.size.width,center.y + item.frame.size.height/2);
//        
//        tabBar.contentSize = CGSizeMake(tabBar.frame.size.width,center.y + item.frame.size.height/2+margine);
//        tabBarBackgroundImage.frame = tabBar.bounds;
//        
//         center.y = center.y + item.frame.size.height+margine;
//        count++;
//    }
//      
    
    //[tabBar setContentOffset:CGPointMake(0,0)];
}

-(void)removeTabBar
{
    
    for(KTTabBarItem *item in [self items])
    {
        item.viewController=nil;
        [appDelegate removeItemsFromView:item];
    }
    
   
    [self.items removeAllObjects];
    
}
-(void)disabledBtn:(int)index
{
    [self tapped:index];

}
-(void)reloadTabBar
{
    [self removeTabBar];
    [appDelegate loadTabBarItems];
}

- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {
    NSLog(@"gesture reco");
    if ([touch.view isKindOfClass:[UIControl class]]) {
        // we touched a button, slider, or other UIControl
        return NO; // ignore the touch
    }
    return YES; // handle the touch
}

-(void)selectItem:(int)index
{
    selectedItem = index;
    if ([self.items count]) {
         [(KTTabBarItem*)[self.items objectAtIndex:index] setSelected:nil];
    }
   
    //title1.title = [[self.items objectAtIndex:index] title] ;
}
-(void)tapped:(int)itemTapped
{
    
    [self.delegate tapped:itemTapped];

}
-(void)isEnabled:(BOOL)enabled
{
    NSLog(@"%@",self.items);
    for(KTTabBarItem *item in [self items])
        [item setIsEnabled:enabled];
    
}
-(void)setSelected:(int)selectedItem1
{
    
   // KTTabBarItem *item = [self.items objectAtIndex:selectedItem1];

    NSLog(@"selected Item %d", selectedItem1);
    selectedItem = selectedItem1;
//    titleLbl.text = [[self.items objectAtIndex:selectedItem] title] ;

    if ([self.items count])
        NSLog(@"%@",[[self.items objectAtIndex:selectedItem] viewController]);
    
    //NSLog(@"title %@",[[self.items objectAtIndex:selectedItem] title]);
    if([rootViewController respondsToSelector:@selector(removePDFViewFromWorkBookPage)])
        [rootViewController performSelector:@selector(removePDFViewFromWorkBookPage)];
    if(rootViewController)
    {  if(![rootViewController isKindOfClass:[UIPopoverController class]] && selectedItem1!=2)
        {
            
             if(rootViewController.view)
                 [rootViewController.view removeFromSuperview];
        }
        else if([rootViewController isKindOfClass:[UIPopoverController class]])
        {
          [appDelegate.popOver dismissPopoverAnimated:YES];
        }


    }
     if ([self.items count])
     {
         if(![rootViewController isKindOfClass:[UIPopoverController class]])
             preView = rootViewController.view;
         rootViewController = [[self.items objectAtIndex:selectedItem1] viewController];
     }
    
    //rootViewController.view.bounds = [[appDelegate window] bounds];
    if([rootViewController isKindOfClass:[UIPopoverController class]])
    {
        
        if(![appDelegate.popOver isPopoverVisible])
        {
            [self performSelector:@selector(presentPopover)];
        }
        else {
            [self performSelector:@selector(presentPopover) withObject:nil afterDelay:.4];
        }
    }
    else
    {
         if(selectedItem == 2)
         {
              if ([self.items count])
            [[[appDelegate.tabBarController items] objectAtIndex:2] setViewController:appDelegate.popOver];
             [appDelegate.popOver dismissPopoverAnimated:YES];
             [preView removeFromSuperview];
         }
                
        //[self addView:rootViewController.view];
        rootViewController.view.frame = CGRectMake(0,bar.frame.size.height,rootViewController.view.frame.size.width,rootViewController.view.frame.size.height);
        
        
        [self.view addSubview:rootViewController.view];
        [self.view bringSubviewToFront:tabBar];
        [self.view bringSubviewToFront:bar];
        if(selectedItem1==appDelegate.prevSelectedIndex && selectedItem1==3)
            appDelegate.isWorkbookSelected=YES;
        else 
            appDelegate.isWorkbookSelected=NO;
        
        if(selectedItem1!=2)
            appDelegate.prevSelectedIndex=selectedItem1;
        
    }
    
}

-(void)presentPopover
{
    CGRect rect = [[self.items objectAtIndex:selectedItem] bounds];
    [appDelegate.popOver presentPopoverFromRect:CGRectMake(rect.origin.x,rect.origin.y,rect.size.width,rect.size.height) inView:
     
     [self.items objectAtIndex:selectedItem]
                       permittedArrowDirections:UIPopoverArrowDirectionLeft animated:YES];
}

UIImageView *firstView = nil;

-(void)addView:(UIView*)view
{
    rootViewController.view.frame = CGRectMake(0,bar.frame.size.height,rootViewController.view.frame.size.width,rootViewController.view.frame.size.height);
    
    UIGraphicsBeginImageContext(view.bounds.size);
    [view.layer renderInContext:UIGraphicsGetCurrentContext()];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    [self animateOut:image];
    
//    view.frame = [[self.items objectAtIndex:selectedItem] frame];
//    
//    [UIView beginAnimations:@"" context:nil];
//    [UIView setAnimationDidStopSelector:@selector(stop)];
//    [UIView setAnimationDuration:1.5];
//    [UIView setAnimationDelegate:self];
//    //[UIView setAnimationTransition:103 forView:view cache:YES];
//    view.frame = CGRectMake(0,bar.frame.size.height,view.frame.size.width,view.frame.size.height);
//    [UIView commitAnimations];
    
}

-(void)animateOut:(UIImage*)image {
    
    
    firstView = [[UIImageView alloc] initWithFrame:[[self.items objectAtIndex:selectedItem]frame]];
    firstView.image = image;
    firstView.alpha = 0.0;
    [self.view addSubview:firstView];
    [self.view bringSubviewToFront:firstView];
    [self.view bringSubviewToFront:tabBar];
    [self.view bringSubviewToFront:bar];
    
    

    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:1.0];
    [UIView setAnimationTransition:103 forView:self.view cache:YES];
    [UIView setAnimationDelegate:self]; 
    [UIView setAnimationDidStopSelector:@selector(startupAnimationDone:finished:context:)];
    firstView.alpha = 1.0;
    // change this for a different scale
    firstView.frame = rootViewController.view.frame;  
    //firstView.transform = CGAffineTransformMake(1,1,1,1,1,1);
    [UIView commitAnimations];
}

- (void)startupAnimationDone:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context {
    [firstView removeFromSuperview];
    //[firstView release];
    
    [self.view addSubview:rootViewController.view];
    [self.view bringSubviewToFront:tabBar];
    [self.view bringSubviewToFront:bar];
}


-(void)stop
{
    rootViewController.view.frame = CGRectMake(0,bar.frame.size.height,rootViewController.view.frame.size.width,rootViewController.view.frame.size.height);
    
    
    [self.view addSubview:rootViewController.view];
    [self.view bringSubviewToFront:tabBar];
    [self.view bringSubviewToFront:bar];

    
}

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

#pragma mark - View lifecycle

- (void)viewDidLoad
{
    [super viewDidLoad];
  
    // Do any additional setup after loading the view from its nib.
//    [[UINavigationBar appearance] setBackgroundImage:[UIImage imageNamed:@"topbar_withtext.png"] forBarMetrics:UIBarMetricsDefault];
    
    bar=[[UIView alloc] initWithFrame:CGRectMake(0, 0, 1024, 56)];
    
    UIImage *img = [UIImage imageNamed:@"topbar_withtext.png"];
    UIImageView *imgv = [[UIImageView alloc]initWithImage:img];
    
    
    imgv.frame = CGRectMake(0,0,1024,56);

    //[[UINavigationBar appearance] setBounds:imgv.bounds];
    [bar addSubview:imgv];
    
    logoutBtn =[UIButton buttonWithType:UIButtonTypeCustom];
    [logoutBtn setFrame:CGRectMake(940, 12, 77, 32)];
    [logoutBtn setBackgroundImage:[UIImage imageNamed:@"log_out_btn.png"] forState:UIControlStateNormal];
//    [logoutBtn setTitle:@"Logout" forState:UIControlStateNormal];
//    [logoutBtn.titleLabel setFont:[UIFont boldSystemFontOfSize:15]];
    [logoutBtn addTarget:self action:@selector(logoutButtonClicked:) forControlEvents:UIControlEventTouchUpInside];
    [bar addSubview:logoutBtn];
    [self.view addSubview:bar];
    
    
     [self reloadItems];
     [self selectItem:0];
   
}
-(void)viewWillAppear:(BOOL)animated
{
   
    
}
- (void)viewDidUnload
{
    tabBar = nil;
    rootView = nil;
    bar = nil;
    
    title1 = nil;
   

    
    tabBarBackgroundImage = nil;
    
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

-(void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation
{
    
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
	return UIInterfaceOrientationIsLandscape(interfaceOrientation);
}

@end
